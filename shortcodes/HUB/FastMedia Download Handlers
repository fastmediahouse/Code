private function create_watermarked_image($source_path, $attachment_id) {
    error_log('=== WATERMARK DEBUG START ===');
    error_log('Source path: ' . $source_path);
    
    // Get image info
    $image_info = getimagesize($source_path);
    if (!$image_info) {
        error_log('Failed to get image info');
        return false;
    }
    
    $mime_type = $image_info['mime'];
    $width = $image_info[0];
    $height = $image_info[1];
    
    error_log('Original image: ' . $width . 'x' . $height . ' (' . $mime_type . ')');
    
    // Create image resource from source
    switch ($mime_type) {
        case 'image/jpeg':
            $source_image = imagecreatefromjpeg($source_path);
            break;
        case 'image/png':
            $source_image = imagecreatefrompng($source_path);
            break;
        case 'image/gif':
            $source_image = imagecreatefromgif($source_path);
            break;
        default:
            error_log('Unsupported mime type: ' . $mime_type);
            return false;
    }
    
    if (!$source_image) {
        error_log('Failed to create source image resource');
        return false;
    }
    
    // Resize to comp size (max 1200px on longest side)
    $max_comp_size = 1200;
    if ($width > $height) {
        $new_width = min($width, $max_comp_size);
        $new_height = ($height * $new_width) / $width;
    } else {
        $new_height = min($height, $max_comp_size);
        $new_width = ($width * $new_height) / $height;
    }
    
    error_log('Resized dimensions: ' . $new_width . 'x' . $new_height);
    
    // Create new image with comp dimensions
    $comp_image = imagecreatetruecolor($new_width, $new_height);
    
    // Preserve transparency for PNG
    if ($mime_type == 'image/png') {
        imagealphablending($comp_image, false);
        imagesavealpha($comp_image, true);
        $transparent = imagecolorallocatealpha($comp_image, 255, 255, 255, 127);
        imagefill($comp_image, 0, 0, $transparent);
    }
    
    // Resize source image to comp size
    imagecopyresampled($comp_image, $source_image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
    error_log('Image resized successfully');
    
    // Add Fast Media logo watermark
    $logo_urls = array(
        'https://fastmediahouse.com/wp-content/uploads/2025/02/Black-logo-no-background-scaled.png', // Try PNG first
        'https://fastmediahouse.com/wp-content/uploads/2025/07/Color-logo-with-background-scaled.webp'  // Fallback to WebP
    );
    
    $logo_added = false;
    
    error_log('Starting logo watermark process...');
    
    // Try to use logos in order
    foreach ($logo_urls as $index => $logo_url) {
        error_log('Attempting logo ' . ($index + 1) . ': ' . $logo_url);
        
        $logo_data = wp_remote_get($logo_url, array(
            'timeout' => 30,
            'user-agent' => 'FastMedia/1.0'
        ));
        
        if (is_wp_error($logo_data)) {
            error_log('wp_remote_get error: ' . $logo_data->get_error_message());
            continue;
        }
        
        $response_code = wp_remote_retrieve_response_code($logo_data);
        error_log('Response code: ' . $response_code);
        
        if ($response_code == 200) {
            $logo_content = wp_remote_retrieve_body($logo_data);
            $content_length = strlen($logo_content);
            error_log('Logo content retrieved, size: ' . $content_length . ' bytes');
            
            if ($content_length < 100) {
                error_log('Logo content too small, likely empty or error');
                continue;
            }
            
            // Create temporary file for logo
            $temp_logo = wp_tempnam('fastmedia_logo_');
            if (!$temp_logo) {
                error_log('Failed to create temp file');
                continue;
            }
            
            $bytes_written = file_put_contents($temp_logo, $logo_content);
            error_log('Wrote ' . $bytes_written . ' bytes to temp file: ' . $temp_logo);
            
            // Load logo based on file type
            $logo = false;
            if (strpos($logo_url, '.webp') !== false) {
                error_log('Processing WebP logo');
                if (function_exists('imagecreatefromwebp')) {
                    $logo = imagecreatefromwebp($temp_logo);
                    if (!$logo) {
                        error_log('imagecreatefromwebp failed');
                    }
                } else {
                    error_log('WebP support not available');
                }
            } else {
                error_log('Processing PNG logo');
                $logo = imagecreatefrompng($temp_logo);
                if (!$logo) {
                    error_log('imagecreatefrompng failed');
                }
            }
            
            if ($logo) {
                error_log('Logo loaded successfully');
                $logo_width = imagesx($logo);
                $logo_height = imagesy($logo);
                error_log('Logo dimensions: ' . $logo_width . 'x' . $logo_height);
                
                // Calculate logo size (20% of image width, max 300px)
                $watermark_width = min($new_width * 0.2, 300);
                $watermark_height = ($logo_height * $watermark_width) / $logo_width;
                error_log('Watermark size: ' . $watermark_width . 'x' . $watermark_height);
                
                // Create resized logo with transparency
                $resized_logo = imagecreatetruecolor($watermark_width, $watermark_height);
                imagealphablending($resized_logo, false);
                imagesavealpha($resized_logo, true);
                $transparent = imagecolorallocatealpha($resized_logo, 255, 255, 255, 127);
                imagefill($resized_logo, 0, 0, $transparent);
                
                // Resize logo
                $resize_result = imagecopyresampled($resized_logo, $logo, 0, 0, 0, 0, $watermark_width, $watermark_height, $logo_width, $logo_height);
                error_log('Logo resize result: ' . ($resize_result ? 'success' : 'failed'));
                
                // Position logo (center)
                $logo_x = ($new_width - $watermark_width) / 2;
                $logo_y = ($new_height - $watermark_height) / 2;
                error_log('Logo position: ' . $logo_x . ',' . $logo_y);
                
                // Add logo with transparency (50% opacity)
                $merge_result = imagecopymerge($comp_image, $resized_logo, $logo_x, $logo_y, 0, 0, $watermark_width, $watermark_height, 50);
                error_log('Logo merge result: ' . ($merge_result ? 'success' : 'failed'));
                
                // Clean up
                imagedestroy($logo);
                imagedestroy($resized_logo);
                unlink($temp_logo);
                
                $logo_added = true;
                error_log('Logo watermark added successfully!');
                break; // Success, exit loop
            } else {
                error_log('Failed to create logo image resource');
                unlink($temp_logo);
            }
        } else {
            error_log('HTTP error: ' . $response_code);
        }
    }
    
    // Fallback to text watermark if logo loading failed
    if (!$logo_added) {
        error_log('Logo watermark failed, using text fallback');
        $watermark_text = "FAST MEDIA";
        $font_size = max(24, $new_width / 30);
        $watermark_color = imagecolorallocatealpha($comp_image, 255, 255, 255, 80);
        $shadow_color = imagecolorallocatealpha($comp_image, 0, 0, 0, 50);
        
        $text_width = strlen($watermark_text) * ($font_size / 2);
        $x = ($new_width - $text_width) / 2;
        $y = ($new_height) / 2;
        
        // Add shadow and text
        imagestring($comp_image, 5, $x + 2, $y + 2, $watermark_text, $shadow_color);
        imagestring($comp_image, 5, $x, $y, $watermark_text, $watermark_color);
        error_log('Text watermark added');
    }
    
    // Create temporary file
    $temp_file = wp_tempnam('fastmedia_comp_');
    if (!$temp_file) {
        error_log('Failed to create final temp file');
        imagedestroy($source_image);
        imagedestroy($comp_image);
        return false;
    }
    
    // Save watermarked image
    $success = imagejpeg($comp_image, $temp_file, 85); // 85% quality for comp
    error_log('Final image save result: ' . ($success ? 'success' : 'failed'));
    error_log('Final file size: ' . (file_exists($temp_file) ? filesize($temp_file) : 'file not found'));
    
    // Clean up memory
    imagedestroy($source_image);
    imagedestroy($comp_image);
    
    error_log('=== WATERMARK DEBUG END ===');
    return $success ? $temp_file : false;
}
