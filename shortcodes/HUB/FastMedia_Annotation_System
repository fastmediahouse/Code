class FastMedia_Annotation_System {
    
    public function __construct() {
        add_action('wp_ajax_fastmedia_checkout_image', array($this, 'checkout_image_handler'));
        add_action('wp_ajax_fastmedia_checkin_image', array($this, 'checkin_image_handler'));
        add_action('wp_ajax_fastmedia_save_annotation', array($this, 'save_annotation_handler'));
        add_action('wp_ajax_fastmedia_heartbeat', array($this, 'heartbeat_handler'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_annotation_assets'));
    }
    
    public function checkout_image_handler() {
        if (!is_user_logged_in()) {
            wp_send_json_error('User not logged in');
        }
        
        $attachment_id = intval($_POST['attachment_id']);
        $user_id = get_current_user_id();
        
        if (get_post_field('post_author', $attachment_id) != $user_id) {
            wp_send_json_error('Access denied');
        }
        
        // Check if already checked out
        $checkout_user = get_post_meta($attachment_id, '_annotation_checkout_user', true);
        $checkout_time = get_post_meta($attachment_id, '_annotation_checkout_time', true);
        
        // Auto-release after 30 minutes
        if ($checkout_user && $checkout_user != $user_id && ($checkout_time + 1800) > time()) {
            wp_send_json_error('This image is currently being edited by another user. Please try again later.');
        }
        
        // Check out the image
        update_post_meta($attachment_id, '_annotation_checkout_user', $user_id);
        update_post_meta($attachment_id, '_annotation_checkout_time', time());
        
        wp_send_json_success(array(
            'message' => 'Image checked out successfully',
            'attachment_id' => $attachment_id
        ));
    }
    
    public function checkin_image_handler() {
        if (!is_user_logged_in()) {
            wp_send_json_error('User not logged in');
        }
        
        $attachment_id = intval($_POST['attachment_id']);
        $user_id = get_current_user_id();
        
        // Release the checkout
        delete_post_meta($attachment_id, '_annotation_checkout_user');
        delete_post_meta($attachment_id, '_annotation_checkout_time');
        
        wp_send_json_success('Image checked in successfully');
    }
    
    public function heartbeat_handler() {
        if (!is_user_logged_in()) {
            wp_send_json_error('User not logged in');
        }
        
        $attachment_id = intval($_POST['attachment_id']);
        $user_id = get_current_user_id();
        
        // Update checkout time to keep the lock active
        $checkout_user = get_post_meta($attachment_id, '_annotation_checkout_user', true);
        if ($checkout_user == $user_id) {
            update_post_meta($attachment_id, '_annotation_checkout_time', time());
            wp_send_json_success('Heartbeat updated');
        } else {
            wp_send_json_error('Checkout expired');
        }
    }
    
    public function save_annotation_handler() {
        if (!is_user_logged_in()) {
            wp_send_json_error('User not logged in');
        }
        
        $attachment_id = intval($_POST['attachment_id']);
        $image_data = $_POST['image_data'];
        $user_id = get_current_user_id();
        
        if (get_post_field('post_author', $attachment_id) != $user_id) {
            wp_send_json_error('Access denied');
        }
        
        $image_data = str_replace('data:image/png;base64,', '', $image_data);
        $image_data = str_replace(' ', '+', $image_data);
        $decoded_image = base64_decode($image_data);
        
        if (!$decoded_image) {
            wp_send_json_error('Invalid image data');
        }
        
        $original_post = get_post($attachment_id);
        $upload_dir = wp_upload_dir();
        $filename = 'ANNOTATED_' . sanitize_file_name($original_post->post_title) . '_' . date('Y-m-d_H-i-s') . '.png';
        $file_path = $upload_dir['path'] . '/' . $filename;
        
        if (file_put_contents($file_path, $decoded_image) === false) {
            wp_send_json_error('Failed to save annotated image');
        }
        
        $attachment_data = array(
            'post_title' => 'Annotated: ' . $original_post->post_title,
            'post_content' => 'Annotated version of: ' . $original_post->post_title,
            'post_status' => 'inherit',
            'post_author' => $user_id,
            'post_mime_type' => 'image/png'
        );
        
        $new_attachment_id = wp_insert_attachment($attachment_data, $file_path);
        
        if ($new_attachment_id) {
            require_once(ABSPATH . 'wp-admin/includes/image.php');
            $attachment_metadata = wp_generate_attachment_metadata($new_attachment_id, $file_path);
            wp_update_attachment_metadata($new_attachment_id, $attachment_metadata);
            
            // Copy labels from original
            $original_labels = get_field('fastmedia_asset_labels', $attachment_id);
            if ($original_labels) {
                update_field('fastmedia_asset_labels', $original_labels, $new_attachment_id);
            }
            
            // Add reference to original
            update_post_meta($new_attachment_id, '_annotated_from', $attachment_id);
            
            wp_send_json_success(array(
                'message' => 'Annotated version saved successfully',
                'new_attachment_id' => $new_attachment_id,
                'redirect_url' => '/asset-detail/?id=' . $new_attachment_id
            ));
        } else {
            wp_send_json_error('Failed to create new attachment');
        }
    }
    
    public function enqueue_annotation_assets() {
        if (is_page() || is_single()) {
            wp_enqueue_script('fabric-js', 'https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js', array(), '5.3.0', true);
            
            wp_add_inline_style('wp-admin', '
                #fastmedia-annotation-modal {
                    display: none !important;
                    position: fixed !important;
                    top: 0 !important;
                    left: 0 !important;
                    width: 100vw !important;
                    height: 100vh !important;
                    background: rgba(0,0,0,0.95) !important;
                    z-index: 999999 !important;
                    overflow: hidden !important;
                }
                .annotation-container {
                    position: absolute !important;
                    top: 50% !important;
                    left: 50% !important;
                    transform: translate(-50%, -50%) !important;
                    width: 90vw !important;
                    max-width: 1000px !important;
                    height: 75vh !important;
                    max-height: 700px !important;
                    background: white !important;
                    border-radius: 8px !important;
                    display: flex !important;
                    flex-direction: column !important;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.5) !important;
                }
                @media (max-width: 768px) {
                    .annotation-container {
                        width: 95vw !important;
                        height: 95vh !important;
                    }
                    .annotation-toolbar, .annotation-workspace {
                        display: none !important;
                    }
                    .mobile-message {
                        display: block !important;
                    }
                }
                .annotation-header {
                    display: flex !important;
                    justify-content: space-between !important;
                    align-items: center !important;
                    padding: 15px 25px !important;
                    background: #f8f9fa !important;
                    border-bottom: 2px solid #ddd !important;
                    border-radius: 8px 8px 0 0 !important;
                }
                .annotation-toolbar {
                    padding: 15px 25px !important;
                    border-bottom: 1px solid #ddd !important;
                    display: flex !important;
                    gap: 15px !important;
                    align-items: center !important;
                    flex-wrap: wrap !important;
                    background: #fff !important;
                }
                .annotation-workspace {
                    flex: 1 !important;
                    padding: 20px !important;
                    display: flex !important;
                    justify-content: center !important;
                    align-items: center !important;
                    background: #f9f9f9 !important;
                    overflow: auto !important;
                    min-height: 0 !important;
                }
                .annotation-footer {
                    padding: 15px 25px !important;
                    border-top: 2px solid #ddd !important;
                    display: flex !important;
                    justify-content: space-between !important;
                    background: #f8f9fa !important;
                    border-radius: 0 0 8px 8px !important;
                    align-items: center !important;
                }
                .close-btn {
                    background: #dc3545 !important;
                    color: white !important;
                    border: none !important;
                    font-size: 16px !important;
                    cursor: pointer !important;
                    padding: 8px 15px !important;
                    border-radius: 4px !important;
                    font-weight: bold !important;
                }
                #annotation-canvas {
                    border: 2px solid #ddd !important;
                    background: white !important;
                    border-radius: 4px !important;
                    max-width: 100% !important;
                    max-height: 100% !important;
                }
                .tool-btn {
                    padding: 8px 15px !important;
                    border: 1px solid #ddd !important;
                    background: #fff !important;
                    border-radius: 4px !important;
                    cursor: pointer !important;
                    font-size: 14px !important;
                    font-weight: bold !important;
                }
                .tool-btn:hover { background: #f8f9fa !important; }
                .tool-btn.active { background: #0073aa !important; color: white !important; }
                .btn {
                    padding: 12px 25px !important;
                    border: none !important;
                    border-radius: 4px !important;
                    cursor: pointer !important;
                    font-weight: bold !important;
                    font-size: 14px !important;
                }
                .btn-success { background: #28a745 !important; color: white !important; }
                .btn-secondary { background: #6c757d !important; color: white !important; }
                .mobile-message {
                    display: none !important;
                    text-align: center !important;
                    padding: 40px !important;
                    font-size: 18px !important;
                    color: #333 !important;
                }
                .checkout-status {
                    position: absolute !important;
                    top: 10px !important;
                    right: 10px !important;
                    background: #ffc107 !important;
                    color: #000 !important;
                    padding: 5px 10px !important;
                    border-radius: 4px !important;
                    font-size: 12px !important;
                    font-weight: bold !important;
                }
            ');
            
            wp_add_inline_script('fabric-js', '
                window.FastMediaAnnotation = {
                    canvas: null,
                    currentAttachmentId: null,
                    currentImageUrl: null,
                    currentTool: "draw",
                    heartbeatInterval: null,
                    autoCheckinTimeout: null,
                    
                    openEditor: function(attachmentId, imageUrl) {
                        // Check if mobile
                        if (window.innerWidth <= 768) {
                            alert("📱 The annotation tool is only available on desktop devices. Please use a computer to annotate images.");
                            return;
                        }
                        
                        this.currentAttachmentId = attachmentId;
                        this.currentImageUrl = imageUrl;
                        
                        // Check out the image
                        fetch("' . admin_url('admin-ajax.php') . '", {
                            method: "POST",
                            headers: { "Content-Type": "application/x-www-form-urlencoded" },
                            body: "action=fastmedia_checkout_image&attachment_id=" + attachmentId
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.createModal();
                                this.startHeartbeat();
                                this.startAutoCheckin();
                            } else {
                                alert("❌ " + data.data);
                            }
                        });
                    },
                    
                    startHeartbeat: function() {
                        // Send heartbeat every 2 minutes to maintain checkout
                        this.heartbeatInterval = setInterval(() => {
                            fetch("' . admin_url('admin-ajax.php') . '", {
                                method: "POST",
                                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                                body: "action=fastmedia_heartbeat&attachment_id=" + this.currentAttachmentId
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (!data.success) {
                                    alert("⚠️ Your editing session has expired. Please reload and try again.");
                                    this.closeModal();
                                }
                            });
                        }, 120000); // 2 minutes
                    },
                    
                    startAutoCheckin: function() {
                        // Auto check-in after 25 minutes
                        this.autoCheckinTimeout = setTimeout(() => {
                            alert("⏰ Your editing session is about to expire. Please save your work.");
                            setTimeout(() => {
                                this.checkinImage();
                                this.closeModal();
                            }, 300000); // 5 more minutes
                        }, 1500000); // 25 minutes
                    },
                    
                    checkinImage: function() {
                        fetch("' . admin_url('admin-ajax.php') . '", {
                            method: "POST",
                            headers: { "Content-Type": "application/x-www-form-urlencoded" },
                            body: "action=fastmedia_checkin_image&attachment_id=" + this.currentAttachmentId
                        });
                    },
                    
                    createModal: function() {
                        const existingModal = document.getElementById("fastmedia-annotation-modal");
                        if (existingModal) existingModal.remove();
                        
                        const modal = document.createElement("div");
                        modal.id = "fastmedia-annotation-modal";
                        modal.style.cssText = "position: fixed !important; top: 0 !important; left: 0 !important; width: 100vw !important; height: 100vh !important; background: rgba(0,0,0,0.95) !important; z-index: 999999 !important; display: flex !important; align-items: center !important; justify-content: center !important; overflow: hidden !important;";
                        modal.innerHTML = `
                            <div class="annotation-container">
                                <div class="annotation-header">
                                    <h3>🎨 Annotate Image #${this.currentAttachmentId}</h3>
                                    <button class="close-btn" onclick="FastMediaAnnotation.closeModal()">✕ Close</button>
                                </div>
                                
                                <div class="annotation-toolbar">
                                    <button class="tool-btn active" onclick="FastMediaAnnotation.setTool(this, \'draw\')">✏️ Draw</button>
                                    <button class="tool-btn" onclick="FastMediaAnnotation.setTool(this, \'text\')">💬 Text</button>
                                    <button class="tool-btn" onclick="FastMediaAnnotation.setTool(this, \'arrow\')">➡️ Arrow</button>
                                    
                                    <span style="margin-left: 20px; font-weight: bold;">Color:</span>
                                    <input type="color" id="annotation-color" value="#ff0000" onchange="FastMediaAnnotation.setColor(this.value)" style="width: 40px; height: 35px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
                                    
                                    <span style="margin-left: 15px; font-weight: bold;">Size:</span>
                                    <input type="range" id="brush-size" min="1" max="20" value="3" onchange="FastMediaAnnotation.setBrushSize(this.value)" style="width: 100px;">
                                    <span id="brush-size-display" style="font-weight: bold; margin-left: 5px;">3px</span>
                                    
                                    <button class="tool-btn" onclick="FastMediaAnnotation.clear()" style="margin-left: 20px; background: #dc3545; color: white;">🗑️ Clear</button>
                                </div>
                                
                                <div class="annotation-workspace">
                                    <canvas id="annotation-canvas"></canvas>
                                </div>
                                
                                <div class="annotation-footer">
                                    <button class="btn btn-secondary" onclick="FastMediaAnnotation.closeModal()">Cancel</button>
                                    <button class="btn btn-success" onclick="FastMediaAnnotation.saveAnnotation()">💾 Save as Copy</button>
                                </div>
                            </div>
                        `;
                        
                        document.body.appendChild(modal);
                        document.body.style.overflow = "hidden"; // Prevent body scroll
                        
                        // Initialize canvas after a short delay
                        setTimeout(() => {
                            this.initializeCanvas();
                        }, 50);
                    },
                    
                    initializeCanvas: function() {
                        this.canvas = new fabric.Canvas("annotation-canvas");
                        this.canvas.setWidth(700);
                        this.canvas.setHeight(450);
                        
                        // Use the passed image URL or fallback to finding the image element
                        const imageUrl = this.currentImageUrl || document.getElementById("asset-img").src;
                        
                        fabric.Image.fromURL(imageUrl, (img) => {
                            const scale = Math.min(700 / img.width, 450 / img.height);
                            img.scale(scale);
                            img.set({
                                left: (700 - img.width * scale) / 2,
                                top: (450 - img.height * scale) / 2,
                                selectable: false,
                                evented: false
                            });
                            this.canvas.setBackgroundImage(img, this.canvas.renderAll.bind(this.canvas));
                        }, { crossOrigin: "anonymous" });
                        
                        this.setTool(document.querySelector(".tool-btn.active"), "draw");
                    },
                    
                    setTool: function(button, tool) {
                        // Remove active from all buttons
                        document.querySelectorAll(".tool-btn").forEach(btn => btn.classList.remove("active"));
                        button.classList.add("active");
                        
                        this.currentTool = tool;
                        console.log("Setting tool to:", tool);
                        
                        // Disable drawing mode first
                        this.canvas.isDrawingMode = false;
                        this.canvas.selection = true;
                        
                        if (tool === "draw") {
                            this.canvas.isDrawingMode = true;
                            this.canvas.selection = false;
                            this.canvas.freeDrawingBrush.width = parseInt(document.getElementById("brush-size").value || 3);
                            this.canvas.freeDrawingBrush.color = document.getElementById("annotation-color").value;
                            console.log("Drawing mode enabled");
                        } else if (tool === "text") {
                            setTimeout(() => this.addText(), 100);
                        } else if (tool === "arrow") {
                            setTimeout(() => this.addArrow(), 100);
                        }
                    },
                    
                    setColor: function(color) {
                        if (this.canvas.isDrawingMode) {
                            this.canvas.freeDrawingBrush.color = color;
                        }
                    },
                    
                    setBrushSize: function(size) {
                        if (this.canvas.isDrawingMode) {
                            this.canvas.freeDrawingBrush.width = parseInt(size);
                        }
                        document.getElementById("brush-size-display").textContent = size + "px";
                    },
                    
                    addText: function() {
                        console.log("Adding text");
                        const text = new fabric.IText("Click to edit", {
                            left: 200,
                            top: 200,
                            fontFamily: "Arial",
                            fontSize: 24,
                            fill: document.getElementById("annotation-color").value,
                            backgroundColor: "rgba(255,255,255,0.8)"
                        });
                        this.canvas.add(text);
                        this.canvas.setActiveObject(text);
                        text.enterEditing();
                    },
                    
                    addArrow: function() {
                        console.log("Adding arrow");
                        const color = document.getElementById("annotation-color").value;
                        const line = new fabric.Line([50, 50, 200, 50], {
                            stroke: color,
                            strokeWidth: 4,
                            selectable: true
                        });
                        
                        const triangle = new fabric.Triangle({
                            left: 200,
                            top: 40,
                            width: 20,
                            height: 20,
                            fill: color,
                            selectable: true
                        });
                        
                        this.canvas.add(line);
                        this.canvas.add(triangle);
                    },
                    
                    clear: function() {
                        if (confirm("Clear all annotations?")) {
                            this.canvas.clear();
                            this.initializeCanvas();
                        }
                    },
                    
                    saveAnnotation: function() {
                        if (confirm("Save this annotated version as a new copy?")) {
                            const imageData = this.canvas.toDataURL("image/png");
                            
                            fetch("' . admin_url('admin-ajax.php') . '", {
                                method: "POST",
                                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                                body: "action=fastmedia_save_annotation&attachment_id=" + this.currentAttachmentId + "&image_data=" + encodeURIComponent(imageData)
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert("✅ Annotated copy saved successfully!");
                                    this.checkinImage();
                                    this.closeModal();
                                    
                                    // Redirect to the new image
                                    if (data.data.redirect_url) {
                                        window.location.href = data.data.redirect_url;
                                    } else {
                                        location.reload();
                                    }
                                } else {
                                    alert("❌ Error saving: " + data.data);
                                }
                            });
                        }
                    },
                    
                    closeModal: function() {
                        const modal = document.getElementById("fastmedia-annotation-modal");
                        if (modal) {
                            // Check in the image
                            this.checkinImage();
                            
                            // Clear intervals
                            if (this.heartbeatInterval) {
                                clearInterval(this.heartbeatInterval);
                            }
                            if (this.autoCheckinTimeout) {
                                clearTimeout(this.autoCheckinTimeout);
                            }
                            
                            modal.remove();
                            document.body.style.overflow = ""; // Restore body scroll
                        }
                    }
                };
                
                console.log("✅ FastMedia Annotation System with checkout/checkin loaded");
            ');
        }
    }
}

new FastMedia_Annotation_System();
